/*
 * generated by Xtext
 */
package fr.inria.diverse.hdl.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import fr.inria.diverse.hdl.services.HipsterDomainLanguageGrammarAccess;

public class HipsterDomainLanguageParser extends AbstractContentAssistParser {
	
	@Inject
	private HipsterDomainLanguageGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected fr.inria.diverse.hdl.ui.contentassist.antlr.internal.InternalHipsterDomainLanguageParser createParser() {
		fr.inria.diverse.hdl.ui.contentassist.antlr.internal.InternalHipsterDomainLanguageParser result = new fr.inria.diverse.hdl.ui.contentassist.antlr.internal.InternalHipsterDomainLanguageParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getMyElementAccess().getGroup(), "rule__MyElement__Group__0");
					put(grammarAccess.getMyFeatureAccess().getGroup(), "rule__MyFeature__Group__0");
					put(grammarAccess.getDomainAccess().getElementsAssignment(), "rule__Domain__ElementsAssignment");
					put(grammarAccess.getMyElementAccess().getNameAssignment_1(), "rule__MyElement__NameAssignment_1");
					put(grammarAccess.getMyElementAccess().getSomeFeatureOfMyElementAssignment_3(), "rule__MyElement__SomeFeatureOfMyElementAssignment_3");
					put(grammarAccess.getMyFeatureAccess().getNameAssignment_1(), "rule__MyFeature__NameAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			fr.inria.diverse.hdl.ui.contentassist.antlr.internal.InternalHipsterDomainLanguageParser typedParser = (fr.inria.diverse.hdl.ui.contentassist.antlr.internal.InternalHipsterDomainLanguageParser) parser;
			typedParser.entryRuleDomain();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public HipsterDomainLanguageGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(HipsterDomainLanguageGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
