/*
 * generated by Xtext
 */
grammar InternalHipsterDomainLanguage;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package fr.inria.diverse.hdl.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package fr.inria.diverse.hdl.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import fr.inria.diverse.hdl.services.HipsterDomainLanguageGrammarAccess;

}

@parser::members {
 
 	private HipsterDomainLanguageGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(HipsterDomainLanguageGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleDomain
entryRuleDomain 
:
{ before(grammarAccess.getDomainRule()); }
	 ruleDomain
{ after(grammarAccess.getDomainRule()); } 
	 EOF 
;

// Rule Domain
ruleDomain
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDomainAccess().getElementsAssignment()); }
(rule__Domain__ElementsAssignment)*
{ after(grammarAccess.getDomainAccess().getElementsAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMyElement
entryRuleMyElement 
:
{ before(grammarAccess.getMyElementRule()); }
	 ruleMyElement
{ after(grammarAccess.getMyElementRule()); } 
	 EOF 
;

// Rule MyElement
ruleMyElement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMyElementAccess().getGroup()); }
(rule__MyElement__Group__0)
{ after(grammarAccess.getMyElementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMyFeature
entryRuleMyFeature 
:
{ before(grammarAccess.getMyFeatureRule()); }
	 ruleMyFeature
{ after(grammarAccess.getMyFeatureRule()); } 
	 EOF 
;

// Rule MyFeature
ruleMyFeature
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMyFeatureAccess().getGroup()); }
(rule__MyFeature__Group__0)
{ after(grammarAccess.getMyFeatureAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MyElement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MyElement__Group__0__Impl
	rule__MyElement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MyElement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyElementAccess().getMyElementKeyword_0()); }

	'myElement' 

{ after(grammarAccess.getMyElementAccess().getMyElementKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MyElement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MyElement__Group__1__Impl
	rule__MyElement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MyElement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyElementAccess().getNameAssignment_1()); }
(rule__MyElement__NameAssignment_1)
{ after(grammarAccess.getMyElementAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MyElement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MyElement__Group__2__Impl
	rule__MyElement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MyElement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyElementAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getMyElementAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MyElement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MyElement__Group__3__Impl
	rule__MyElement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__MyElement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyElementAccess().getSomeFeatureOfMyElementAssignment_3()); }
(rule__MyElement__SomeFeatureOfMyElementAssignment_3)*
{ after(grammarAccess.getMyElementAccess().getSomeFeatureOfMyElementAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MyElement__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MyElement__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MyElement__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyElementAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getMyElementAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__MyFeature__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MyFeature__Group__0__Impl
	rule__MyFeature__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MyFeature__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyFeatureAccess().getFeatureKeyword_0()); }

	'feature' 

{ after(grammarAccess.getMyFeatureAccess().getFeatureKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MyFeature__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MyFeature__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MyFeature__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyFeatureAccess().getNameAssignment_1()); }
(rule__MyFeature__NameAssignment_1)
{ after(grammarAccess.getMyFeatureAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Domain__ElementsAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDomainAccess().getElementsMyElementParserRuleCall_0()); }
	ruleMyElement{ after(grammarAccess.getDomainAccess().getElementsMyElementParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MyElement__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyElementAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getMyElementAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MyElement__SomeFeatureOfMyElementAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyElementAccess().getSomeFeatureOfMyElementMyFeatureParserRuleCall_3_0()); }
	ruleMyFeature{ after(grammarAccess.getMyElementAccess().getSomeFeatureOfMyElementMyFeatureParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MyFeature__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyFeatureAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getMyFeatureAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


