/*
 * generated by Xtext
 */
grammar InternalHipsterDomainLanguage;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package fr.inria.diverse.hdl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package fr.inria.diverse.hdl.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import fr.inria.diverse.hdl.services.HipsterDomainLanguageGrammarAccess;

}

@parser::members {

 	private HipsterDomainLanguageGrammarAccess grammarAccess;
 	
    public InternalHipsterDomainLanguageParser(TokenStream input, HipsterDomainLanguageGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Domain";	
   	}
   	
   	@Override
   	protected HipsterDomainLanguageGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleDomain
entryRuleDomain returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDomainRule()); }
	 iv_ruleDomain=ruleDomain 
	 { $current=$iv_ruleDomain.current; } 
	 EOF 
;

// Rule Domain
ruleDomain returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getDomainAccess().getElementsMyElementParserRuleCall_0()); 
	    }
		lv_elements_0_0=ruleMyElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDomainRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_0_0, 
        		"MyElement");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleMyElement
entryRuleMyElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMyElementRule()); }
	 iv_ruleMyElement=ruleMyElement 
	 { $current=$iv_ruleMyElement.current; } 
	 EOF 
;

// Rule MyElement
ruleMyElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='myElement' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMyElementAccess().getMyElementKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getMyElementAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMyElementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMyElementAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMyElementAccess().getSomeFeatureOfMyElementMyFeatureParserRuleCall_3_0()); 
	    }
		lv_someFeatureOfMyElement_3_0=ruleMyFeature		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMyElementRule());
	        }
       		add(
       			$current, 
       			"someFeatureOfMyElement",
        		lv_someFeatureOfMyElement_3_0, 
        		"MyFeature");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getMyElementAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleMyFeature
entryRuleMyFeature returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMyFeatureRule()); }
	 iv_ruleMyFeature=ruleMyFeature 
	 { $current=$iv_ruleMyFeature.current; } 
	 EOF 
;

// Rule MyFeature
ruleMyFeature returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='feature' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMyFeatureAccess().getFeatureKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getMyFeatureAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMyFeatureRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


