/*
 * generated by Xtext
 */
package fr.inria.diverse.hdl.serializer;

import com.google.inject.Inject;
import com.google.inject.Provider;
import fr.inria.diverse.hdl.hipsterDomainLanguage.Domain;
import fr.inria.diverse.hdl.hipsterDomainLanguage.HipsterDomainLanguagePackage;
import fr.inria.diverse.hdl.hipsterDomainLanguage.MyElement;
import fr.inria.diverse.hdl.hipsterDomainLanguage.MyFeature;
import fr.inria.diverse.hdl.services.HipsterDomainLanguageGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticNodeProvider.INodesForEObjectProvider;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class HipsterDomainLanguageSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private HipsterDomainLanguageGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == HipsterDomainLanguagePackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case HipsterDomainLanguagePackage.DOMAIN:
				sequence_Domain(context, (Domain) semanticObject); 
				return; 
			case HipsterDomainLanguagePackage.MY_ELEMENT:
				sequence_MyElement(context, (MyElement) semanticObject); 
				return; 
			case HipsterDomainLanguagePackage.MY_FEATURE:
				sequence_MyFeature(context, (MyFeature) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     elements+=MyElement*
	 */
	protected void sequence_Domain(EObject context, Domain semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID someFeatureOfMyElement+=MyFeature*)
	 */
	protected void sequence_MyElement(EObject context, MyElement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_MyFeature(EObject context, MyFeature semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, HipsterDomainLanguagePackage.Literals.MY_FEATURE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HipsterDomainLanguagePackage.Literals.MY_FEATURE__NAME));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getMyFeatureAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
}
