/*
 * generated by Xtext
 */
package fr.inria.diverse.hdl.serializer;

import com.google.inject.Inject;
import com.google.inject.Provider;
import fr.inria.diverse.hdl.hipsterDomainLanguage.Domain;
import fr.inria.diverse.hdl.hipsterDomainLanguage.Entity;
import fr.inria.diverse.hdl.hipsterDomainLanguage.Field;
import fr.inria.diverse.hdl.hipsterDomainLanguage.HdlType;
import fr.inria.diverse.hdl.hipsterDomainLanguage.HipsterDomainLanguagePackage;
import fr.inria.diverse.hdl.hipsterDomainLanguage.IntegerMaxSpecification;
import fr.inria.diverse.hdl.hipsterDomainLanguage.IntegerMinSpecification;
import fr.inria.diverse.hdl.hipsterDomainLanguage.Pattern;
import fr.inria.diverse.hdl.hipsterDomainLanguage.Relation;
import fr.inria.diverse.hdl.hipsterDomainLanguage.Required;
import fr.inria.diverse.hdl.hipsterDomainLanguage.StringMaxSpecification;
import fr.inria.diverse.hdl.hipsterDomainLanguage.StringMinSpecification;
import fr.inria.diverse.hdl.services.HipsterDomainLanguageGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticNodeProvider.INodesForEObjectProvider;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class HipsterDomainLanguageSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private HipsterDomainLanguageGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == HipsterDomainLanguagePackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case HipsterDomainLanguagePackage.DOMAIN:
				sequence_Domain(context, (Domain) semanticObject); 
				return; 
			case HipsterDomainLanguagePackage.ENTITY:
				sequence_Entity(context, (Entity) semanticObject); 
				return; 
			case HipsterDomainLanguagePackage.ENUM:
				sequence_Enum(context, (fr.inria.diverse.hdl.hipsterDomainLanguage.Enum) semanticObject); 
				return; 
			case HipsterDomainLanguagePackage.FIELD:
				sequence_Field(context, (Field) semanticObject); 
				return; 
			case HipsterDomainLanguagePackage.HDL_TYPE:
				sequence_HdlType(context, (HdlType) semanticObject); 
				return; 
			case HipsterDomainLanguagePackage.INTEGER_MAX_SPECIFICATION:
				sequence_IntegerMaxSpecification(context, (IntegerMaxSpecification) semanticObject); 
				return; 
			case HipsterDomainLanguagePackage.INTEGER_MIN_SPECIFICATION:
				sequence_IntegerMinSpecification(context, (IntegerMinSpecification) semanticObject); 
				return; 
			case HipsterDomainLanguagePackage.PATTERN:
				sequence_Pattern(context, (Pattern) semanticObject); 
				return; 
			case HipsterDomainLanguagePackage.RELATION:
				sequence_Relation(context, (Relation) semanticObject); 
				return; 
			case HipsterDomainLanguagePackage.REQUIRED:
				sequence_Required(context, (Required) semanticObject); 
				return; 
			case HipsterDomainLanguagePackage.STRING_MAX_SPECIFICATION:
				sequence_StringMaxSpecification(context, (StringMaxSpecification) semanticObject); 
				return; 
			case HipsterDomainLanguagePackage.STRING_MIN_SPECIFICATION:
				sequence_StringMinSpecification(context, (StringMinSpecification) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     elements+=DomainElement*
	 */
	protected void sequence_Domain(EObject context, Domain semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID fields+=Field*)
	 */
	protected void sequence_Entity(EObject context, Entity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID literals+=ID literals+=ID*)
	 */
	protected void sequence_Enum(EObject context, fr.inria.diverse.hdl.hipsterDomainLanguage.Enum semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID type=HdlType validationRules+=ValidationRule*)
	 */
	protected void sequence_Field(EObject context, Field semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (enumType=[Enum|ID] | primitiveType=JHipsterType)
	 */
	protected void sequence_HdlType(EObject context, HdlType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     max=INT
	 */
	protected void sequence_IntegerMaxSpecification(EObject context, IntegerMaxSpecification semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, HipsterDomainLanguagePackage.Literals.MAX_SPECIFICATION__MAX) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HipsterDomainLanguagePackage.Literals.MAX_SPECIFICATION__MAX));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getIntegerMaxSpecificationAccess().getMaxINTTerminalRuleCall_2_0(), semanticObject.getMax());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     min=INT
	 */
	protected void sequence_IntegerMinSpecification(EObject context, IntegerMinSpecification semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, HipsterDomainLanguagePackage.Literals.MIN_SPECIFICATION__MIN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HipsterDomainLanguagePackage.Literals.MIN_SPECIFICATION__MIN));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getIntegerMinSpecificationAccess().getMinINTTerminalRuleCall_2_0(), semanticObject.getMin());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     regex=STRING
	 */
	protected void sequence_Pattern(EObject context, Pattern semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, HipsterDomainLanguagePackage.Literals.PATTERN__REGEX) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HipsterDomainLanguagePackage.Literals.PATTERN__REGEX));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getPatternAccess().getRegexSTRINGTerminalRuleCall_2_0(), semanticObject.getRegex());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (type=RelationType from=[Entity|ID] fromRelation=ID to=[Entity|ID] toRelation=ID)
	 */
	protected void sequence_Relation(EObject context, Relation semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, HipsterDomainLanguagePackage.Literals.RELATION__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HipsterDomainLanguagePackage.Literals.RELATION__TYPE));
			if(transientValues.isValueTransient(semanticObject, HipsterDomainLanguagePackage.Literals.RELATION__FROM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HipsterDomainLanguagePackage.Literals.RELATION__FROM));
			if(transientValues.isValueTransient(semanticObject, HipsterDomainLanguagePackage.Literals.RELATION__FROM_RELATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HipsterDomainLanguagePackage.Literals.RELATION__FROM_RELATION));
			if(transientValues.isValueTransient(semanticObject, HipsterDomainLanguagePackage.Literals.RELATION__TO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HipsterDomainLanguagePackage.Literals.RELATION__TO));
			if(transientValues.isValueTransient(semanticObject, HipsterDomainLanguagePackage.Literals.RELATION__TO_RELATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HipsterDomainLanguagePackage.Literals.RELATION__TO_RELATION));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getRelationAccess().getTypeRelationTypeEnumRuleCall_1_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getRelationAccess().getFromEntityIDTerminalRuleCall_3_0_1(), semanticObject.getFrom());
		feeder.accept(grammarAccess.getRelationAccess().getFromRelationIDTerminalRuleCall_4_1_0(), semanticObject.getFromRelation());
		feeder.accept(grammarAccess.getRelationAccess().getToEntityIDTerminalRuleCall_6_0_1(), semanticObject.getTo());
		feeder.accept(grammarAccess.getRelationAccess().getToRelationIDTerminalRuleCall_7_1_0(), semanticObject.getToRelation());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     required?='required'
	 */
	protected void sequence_Required(EObject context, Required semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, HipsterDomainLanguagePackage.Literals.REQUIRED__REQUIRED) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HipsterDomainLanguagePackage.Literals.REQUIRED__REQUIRED));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getRequiredAccess().getRequiredRequiredKeyword_0(), semanticObject.isRequired());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     max=INT
	 */
	protected void sequence_StringMaxSpecification(EObject context, StringMaxSpecification semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, HipsterDomainLanguagePackage.Literals.MAX_SPECIFICATION__MAX) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HipsterDomainLanguagePackage.Literals.MAX_SPECIFICATION__MAX));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getStringMaxSpecificationAccess().getMaxINTTerminalRuleCall_2_0(), semanticObject.getMax());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     min=INT
	 */
	protected void sequence_StringMinSpecification(EObject context, StringMinSpecification semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, HipsterDomainLanguagePackage.Literals.MIN_SPECIFICATION__MIN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HipsterDomainLanguagePackage.Literals.MIN_SPECIFICATION__MIN));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getStringMinSpecificationAccess().getMinINTTerminalRuleCall_2_0(), semanticObject.getMin());
		feeder.finish();
	}
}
