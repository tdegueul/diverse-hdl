/*
 * generated by Xtext
 */
package fr.inria.diverse.hdl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class HipsterDomainLanguageGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class DomainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Domain");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsDomainElementParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//Domain:
		//	elements+=DomainElement*;
		@Override public ParserRule getRule() { return rule; }

		//elements+=DomainElement*
		public Assignment getElementsAssignment() { return cElementsAssignment; }

		//DomainElement
		public RuleCall getElementsDomainElementParserRuleCall_0() { return cElementsDomainElementParserRuleCall_0; }
	}

	public class DomainElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DomainElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEntityParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRelationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DomainElement:
		//	Entity | Relation;
		@Override public ParserRule getRule() { return rule; }

		//Entity | Relation
		public Alternatives getAlternatives() { return cAlternatives; }

		//Entity
		public RuleCall getEntityParserRuleCall_0() { return cEntityParserRuleCall_0; }

		//Relation
		public RuleCall getRelationParserRuleCall_1() { return cRelationParserRuleCall_1; }
	}

	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Entity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEntityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cFieldsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cFieldsFieldParserRuleCall_2_1_0 = (RuleCall)cFieldsAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//Entity:
		//	"entity" name=ID ("{" fields+=Field* "}");
		@Override public ParserRule getRule() { return rule; }

		//"entity" name=ID ("{" fields+=Field* "}")
		public Group getGroup() { return cGroup; }

		//"entity"
		public Keyword getEntityKeyword_0() { return cEntityKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{" fields+=Field* "}"
		public Group getGroup_2() { return cGroup_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }

		//fields+=Field*
		public Assignment getFieldsAssignment_2_1() { return cFieldsAssignment_2_1; }

		//Field
		public RuleCall getFieldsFieldParserRuleCall_2_1_0() { return cFieldsFieldParserRuleCall_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
	}

	public class RelationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Relation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRelationshipKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeRelationTypeEnumRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFromAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cFromEntityCrossReference_3_0 = (CrossReference)cFromAssignment_3.eContents().get(0);
		private final RuleCall cFromEntityIDTerminalRuleCall_3_0_1 = (RuleCall)cFromEntityCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cFromRelationAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cFromRelationIDTerminalRuleCall_4_1_0 = (RuleCall)cFromRelationAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Keyword cToKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cToAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cToEntityCrossReference_6_0 = (CrossReference)cToAssignment_6.eContents().get(0);
		private final RuleCall cToEntityIDTerminalRuleCall_6_0_1 = (RuleCall)cToEntityCrossReference_6_0.eContents().get(1);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cLeftCurlyBracketKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cToRelationAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cToRelationIDTerminalRuleCall_7_1_0 = (RuleCall)cToRelationAssignment_7_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Relation:
		//	"relationship" type=RelationType "{" from=[Entity] ("{" fromRelation=ID "}") "to" to=[Entity] ("{" toRelation=ID "}")
		//	"}";
		@Override public ParserRule getRule() { return rule; }

		//"relationship" type=RelationType "{" from=[Entity] ("{" fromRelation=ID "}") "to" to=[Entity] ("{" toRelation=ID "}")
		//"}"
		public Group getGroup() { return cGroup; }

		//"relationship"
		public Keyword getRelationshipKeyword_0() { return cRelationshipKeyword_0; }

		//type=RelationType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//RelationType
		public RuleCall getTypeRelationTypeEnumRuleCall_1_0() { return cTypeRelationTypeEnumRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//from=[Entity]
		public Assignment getFromAssignment_3() { return cFromAssignment_3; }

		//[Entity]
		public CrossReference getFromEntityCrossReference_3_0() { return cFromEntityCrossReference_3_0; }

		//ID
		public RuleCall getFromEntityIDTerminalRuleCall_3_0_1() { return cFromEntityIDTerminalRuleCall_3_0_1; }

		//"{" fromRelation=ID "}"
		public Group getGroup_4() { return cGroup_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4_0() { return cLeftCurlyBracketKeyword_4_0; }

		//fromRelation=ID
		public Assignment getFromRelationAssignment_4_1() { return cFromRelationAssignment_4_1; }

		//ID
		public RuleCall getFromRelationIDTerminalRuleCall_4_1_0() { return cFromRelationIDTerminalRuleCall_4_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4_2() { return cRightCurlyBracketKeyword_4_2; }

		//"to"
		public Keyword getToKeyword_5() { return cToKeyword_5; }

		//to=[Entity]
		public Assignment getToAssignment_6() { return cToAssignment_6; }

		//[Entity]
		public CrossReference getToEntityCrossReference_6_0() { return cToEntityCrossReference_6_0; }

		//ID
		public RuleCall getToEntityIDTerminalRuleCall_6_0_1() { return cToEntityIDTerminalRuleCall_6_0_1; }

		//"{" toRelation=ID "}"
		public Group getGroup_7() { return cGroup_7; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_7_0() { return cLeftCurlyBracketKeyword_7_0; }

		//toRelation=ID
		public Assignment getToRelationAssignment_7_1() { return cToRelationAssignment_7_1; }

		//ID
		public RuleCall getToRelationIDTerminalRuleCall_7_1_0() { return cToRelationIDTerminalRuleCall_7_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7_2() { return cRightCurlyBracketKeyword_7_2; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class FieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Field");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeJHipsterTypeEnumRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cRequiredAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cRequiredRequiredKeyword_2_0 = (Keyword)cRequiredAssignment_2.eContents().get(0);
		
		//Field:
		//	name=ID type=JHipsterType required?="required"?;
		@Override public ParserRule getRule() { return rule; }

		//name=ID type=JHipsterType required?="required"?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//type=JHipsterType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//JHipsterType
		public RuleCall getTypeJHipsterTypeEnumRuleCall_1_0() { return cTypeJHipsterTypeEnumRuleCall_1_0; }

		//required?="required"?
		public Assignment getRequiredAssignment_2() { return cRequiredAssignment_2; }

		//"required"
		public Keyword getRequiredRequiredKeyword_2_0() { return cRequiredRequiredKeyword_2_0; }
	}
	
	
	public class RelationTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "RelationType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cONE_TO_MANYEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cONE_TO_MANYOneToManyKeyword_0_0 = (Keyword)cONE_TO_MANYEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMANY_TO_ONEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMANY_TO_ONEManyToOneKeyword_1_0 = (Keyword)cMANY_TO_ONEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cONE_TO_ONEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cONE_TO_ONEOneToOneKeyword_2_0 = (Keyword)cONE_TO_ONEEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cMANY_TO_MANYEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cMANY_TO_MANYManyToManyKeyword_3_0 = (Keyword)cMANY_TO_MANYEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum RelationType:
		//	ONE_TO_MANY="OneToMany" | MANY_TO_ONE="ManyToOne" | ONE_TO_ONE="OneToOne" | MANY_TO_MANY="ManyToMany";
		public EnumRule getRule() { return rule; }

		//ONE_TO_MANY="OneToMany" | MANY_TO_ONE="ManyToOne" | ONE_TO_ONE="OneToOne" | MANY_TO_MANY="ManyToMany"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ONE_TO_MANY="OneToMany"
		public EnumLiteralDeclaration getONE_TO_MANYEnumLiteralDeclaration_0() { return cONE_TO_MANYEnumLiteralDeclaration_0; }

		//"OneToMany"
		public Keyword getONE_TO_MANYOneToManyKeyword_0_0() { return cONE_TO_MANYOneToManyKeyword_0_0; }

		//MANY_TO_ONE="ManyToOne"
		public EnumLiteralDeclaration getMANY_TO_ONEEnumLiteralDeclaration_1() { return cMANY_TO_ONEEnumLiteralDeclaration_1; }

		//"ManyToOne"
		public Keyword getMANY_TO_ONEManyToOneKeyword_1_0() { return cMANY_TO_ONEManyToOneKeyword_1_0; }

		//ONE_TO_ONE="OneToOne"
		public EnumLiteralDeclaration getONE_TO_ONEEnumLiteralDeclaration_2() { return cONE_TO_ONEEnumLiteralDeclaration_2; }

		//"OneToOne"
		public Keyword getONE_TO_ONEOneToOneKeyword_2_0() { return cONE_TO_ONEOneToOneKeyword_2_0; }

		//MANY_TO_MANY="ManyToMany"
		public EnumLiteralDeclaration getMANY_TO_MANYEnumLiteralDeclaration_3() { return cMANY_TO_MANYEnumLiteralDeclaration_3; }

		//"ManyToMany"
		public Keyword getMANY_TO_MANYManyToManyKeyword_3_0() { return cMANY_TO_MANYManyToManyKeyword_3_0; }
	}

	public class JHipsterTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "JHipsterType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSTRINGEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSTRINGStringKeyword_0_0 = (Keyword)cSTRINGEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cINTEGEREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cINTEGERIntegerKeyword_1_0 = (Keyword)cINTEGEREnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLONGEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLONGLongKeyword_2_0 = (Keyword)cLONGEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cBIG_DECIMALEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cBIG_DECIMALBigDecimalKeyword_3_0 = (Keyword)cBIG_DECIMALEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cFLOATEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cFLOATFloatKeyword_4_0 = (Keyword)cFLOATEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cDOUBLEEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cDOUBLEDoubleKeyword_5_0 = (Keyword)cDOUBLEEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cENUMEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cENUMEnumKeyword_6_0 = (Keyword)cENUMEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cBOOLEANEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cBOOLEANBooleanKeyword_7_0 = (Keyword)cBOOLEANEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cLOCAL_DATEEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cLOCAL_DATELocalDateKeyword_8_0 = (Keyword)cLOCAL_DATEEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cZONE_DATE_TIMEEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cZONE_DATE_TIMEZoneDateTimeKeyword_9_0 = (Keyword)cZONE_DATE_TIMEEnumLiteralDeclaration_9.eContents().get(0);
		
		//enum JHipsterType:
		//	STRING="String" | INTEGER="Integer" | LONG="Long" | BIG_DECIMAL="BigDecimal" | FLOAT="Float" | DOUBLE="Double" |
		//	ENUM="Enum" | BOOLEAN="Boolean" | LOCAL_DATE="LocalDate" | ZONE_DATE_TIME="ZoneDateTime";
		public EnumRule getRule() { return rule; }

		//STRING="String" | INTEGER="Integer" | LONG="Long" | BIG_DECIMAL="BigDecimal" | FLOAT="Float" | DOUBLE="Double" |
		//ENUM="Enum" | BOOLEAN="Boolean" | LOCAL_DATE="LocalDate" | ZONE_DATE_TIME="ZoneDateTime"
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING="String"
		public EnumLiteralDeclaration getSTRINGEnumLiteralDeclaration_0() { return cSTRINGEnumLiteralDeclaration_0; }

		//"String"
		public Keyword getSTRINGStringKeyword_0_0() { return cSTRINGStringKeyword_0_0; }

		//INTEGER="Integer"
		public EnumLiteralDeclaration getINTEGEREnumLiteralDeclaration_1() { return cINTEGEREnumLiteralDeclaration_1; }

		//"Integer"
		public Keyword getINTEGERIntegerKeyword_1_0() { return cINTEGERIntegerKeyword_1_0; }

		//LONG="Long"
		public EnumLiteralDeclaration getLONGEnumLiteralDeclaration_2() { return cLONGEnumLiteralDeclaration_2; }

		//"Long"
		public Keyword getLONGLongKeyword_2_0() { return cLONGLongKeyword_2_0; }

		//BIG_DECIMAL="BigDecimal"
		public EnumLiteralDeclaration getBIG_DECIMALEnumLiteralDeclaration_3() { return cBIG_DECIMALEnumLiteralDeclaration_3; }

		//"BigDecimal"
		public Keyword getBIG_DECIMALBigDecimalKeyword_3_0() { return cBIG_DECIMALBigDecimalKeyword_3_0; }

		//FLOAT="Float"
		public EnumLiteralDeclaration getFLOATEnumLiteralDeclaration_4() { return cFLOATEnumLiteralDeclaration_4; }

		//"Float"
		public Keyword getFLOATFloatKeyword_4_0() { return cFLOATFloatKeyword_4_0; }

		//DOUBLE="Double"
		public EnumLiteralDeclaration getDOUBLEEnumLiteralDeclaration_5() { return cDOUBLEEnumLiteralDeclaration_5; }

		//"Double"
		public Keyword getDOUBLEDoubleKeyword_5_0() { return cDOUBLEDoubleKeyword_5_0; }

		//ENUM="Enum"
		public EnumLiteralDeclaration getENUMEnumLiteralDeclaration_6() { return cENUMEnumLiteralDeclaration_6; }

		//"Enum"
		public Keyword getENUMEnumKeyword_6_0() { return cENUMEnumKeyword_6_0; }

		//BOOLEAN="Boolean"
		public EnumLiteralDeclaration getBOOLEANEnumLiteralDeclaration_7() { return cBOOLEANEnumLiteralDeclaration_7; }

		//"Boolean"
		public Keyword getBOOLEANBooleanKeyword_7_0() { return cBOOLEANBooleanKeyword_7_0; }

		//LOCAL_DATE="LocalDate"
		public EnumLiteralDeclaration getLOCAL_DATEEnumLiteralDeclaration_8() { return cLOCAL_DATEEnumLiteralDeclaration_8; }

		//"LocalDate"
		public Keyword getLOCAL_DATELocalDateKeyword_8_0() { return cLOCAL_DATELocalDateKeyword_8_0; }

		//ZONE_DATE_TIME="ZoneDateTime"
		public EnumLiteralDeclaration getZONE_DATE_TIMEEnumLiteralDeclaration_9() { return cZONE_DATE_TIMEEnumLiteralDeclaration_9; }

		//"ZoneDateTime"
		public Keyword getZONE_DATE_TIMEZoneDateTimeKeyword_9_0() { return cZONE_DATE_TIMEZoneDateTimeKeyword_9_0; }
	}
	
	private final DomainElements pDomain;
	private final DomainElementElements pDomainElement;
	private final EntityElements pEntity;
	private final RelationElements pRelation;
	private final FieldElements pField;
	private final RelationTypeElements unknownRuleRelationType;
	private final JHipsterTypeElements unknownRuleJHipsterType;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public HipsterDomainLanguageGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDomain = new DomainElements();
		this.pDomainElement = new DomainElementElements();
		this.pEntity = new EntityElements();
		this.pRelation = new RelationElements();
		this.pField = new FieldElements();
		this.unknownRuleRelationType = new RelationTypeElements();
		this.unknownRuleJHipsterType = new JHipsterTypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.inria.diverse.hdl.HipsterDomainLanguage".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Domain:
	//	elements+=DomainElement*;
	public DomainElements getDomainAccess() {
		return pDomain;
	}
	
	public ParserRule getDomainRule() {
		return getDomainAccess().getRule();
	}

	//DomainElement:
	//	Entity | Relation;
	public DomainElementElements getDomainElementAccess() {
		return pDomainElement;
	}
	
	public ParserRule getDomainElementRule() {
		return getDomainElementAccess().getRule();
	}

	//Entity:
	//	"entity" name=ID ("{" fields+=Field* "}");
	public EntityElements getEntityAccess() {
		return pEntity;
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}

	//Relation:
	//	"relationship" type=RelationType "{" from=[Entity] ("{" fromRelation=ID "}") "to" to=[Entity] ("{" toRelation=ID "}")
	//	"}";
	public RelationElements getRelationAccess() {
		return pRelation;
	}
	
	public ParserRule getRelationRule() {
		return getRelationAccess().getRule();
	}

	//Field:
	//	name=ID type=JHipsterType required?="required"?;
	public FieldElements getFieldAccess() {
		return pField;
	}
	
	public ParserRule getFieldRule() {
		return getFieldAccess().getRule();
	}

	//enum RelationType:
	//	ONE_TO_MANY="OneToMany" | MANY_TO_ONE="ManyToOne" | ONE_TO_ONE="OneToOne" | MANY_TO_MANY="ManyToMany";
	public RelationTypeElements getRelationTypeAccess() {
		return unknownRuleRelationType;
	}
	
	public EnumRule getRelationTypeRule() {
		return getRelationTypeAccess().getRule();
	}

	//enum JHipsterType:
	//	STRING="String" | INTEGER="Integer" | LONG="Long" | BIG_DECIMAL="BigDecimal" | FLOAT="Float" | DOUBLE="Double" |
	//	ENUM="Enum" | BOOLEAN="Boolean" | LOCAL_DATE="LocalDate" | ZONE_DATE_TIME="ZoneDateTime";
	public JHipsterTypeElements getJHipsterTypeAccess() {
		return unknownRuleJHipsterType;
	}
	
	public EnumRule getJHipsterTypeRule() {
		return getJHipsterTypeAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
